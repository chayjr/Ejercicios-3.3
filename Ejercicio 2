#           Autor:
#   David Osvaldo Chay May 
#   may876518@gmail.com
#   Version 1.0 : 28/02/2025

import numpy as np
import matplotlib.pyplot as plt

# Definir el sistema de ecuaciones 6x6
A = np.array([
    [8, 2, -1, 0, 0, 0],
    [3, 15, -2, 1, 0, 0],
    [0, -2, 12, 2, -1, 0],
    [0, 1, -1, 9, -2, 1],
    [0, 0, -2, 3, 14, 1],
    [0, 0, 0, 1, -2, 10]
])

b = np.array([10, 24, -18, 16, -9, 22])

# Solución exacta para comparar errores
sol_exacta = np.linalg.solve(A, b)

# Criterio de paro
tolerancia = 1e-6
max_iter = 100

# Implementación del método de Jacobi
def jacobi(A, b, tol, max_iter):
    n = len(A)
    x = np.zeros(n)  # Aproximación inicial
    errores_abs = []
    errores_rel = []
    errores_cuad = []
    
    print("Iteración | Error absoluto | Error relativo | Error cuadrático")
    
    for k in range(max_iter):
        x_new = np.zeros(n)
        for i in range(n):
            suma = sum(A[i, j] * x[j] for j in range(n) if j != i)
            x_new[i] = (b[i] - suma) / A[i, i]
        
        # Calcular errores
        error_abs = np.linalg.norm(x_new - sol_exacta, ord=1)
        error_rel = np.linalg.norm(x_new - sol_exacta, ord=1) / np.linalg.norm(sol_exacta, ord=1)
        error_cuad = np.linalg.norm(x_new - sol_exacta, ord=2)
        
        errores_abs.append(error_abs)
        errores_rel.append(error_rel)
        errores_cuad.append(error_cuad)
        
        # Imprimir errores de la iteración en formato separado por "|"
        print(f"{k+1} | {error_abs:.6f} | {error_rel:.6f} | {error_cuad:.6f}")
        
        # Criterio de convergencia
        if np.linalg.norm(x_new - x, ord=np.inf) < tol:
            break
        
        x = x_new
    
    return x, errores_abs, errores_rel, errores_cuad, k+1

# Ejecutar el método de Jacobi con el nuevo sistema 6x6
sol_aprox, errores_abs, errores_rel, errores_cuad, iteraciones = jacobi(A, b, tolerancia, max_iter)

# Graficar los errores
plt.figure(figsize=(8,6))
plt.plot(range(1, iteraciones+1), errores_abs, label="Error absoluto", marker='o')
plt.plot(range(1, iteraciones+1), errores_rel, label="Error relativo", marker='s')
plt.plot(range(1, iteraciones+1), errores_cuad, label="Error cuadrático", marker='d')
plt.xlabel("Iteraciones")
plt.ylabel("Error")
plt.yscale("log")
plt.title("Convergencia de los errores en el método de Jacobi")
plt.legend()
plt.grid()
plt.savefig("errores_jacobi.png")
plt.show()

# Mostrar la solución aproximada y la exacta, también separadas por "|"
print("\nSolución aproximada | Solución exacta")
for i in range(len(sol_aprox)):
    print(f"{sol_aprox[i]:.6f} | {sol_exacta[i]:.6f}")
